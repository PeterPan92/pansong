<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.2.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"
>
    <!-- 1、引入数据源配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties" />
    </bean>
    <!--或者使用如下语句-->
    <!--<context:property-placeholder ignore-unresolvable="true" location="classpath:jdbc.properties" />-->

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${driver}" />
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"></property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"></property>
    </bean>

    <!-- 2. 创建SqlSession的工厂 -->
    <!-- dataSource:引用数据源，统一加载配置-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />

        <!-- 自动扫描mapping.xml文件 -->
        <!-- 当mybatis的xml文件和mapper接口不在相同包下时，需要用mapperLocations属性指定xml文件的路径 -->
        <!-- *是个通配符，代表所有的文件，**代表所有目录下 -->
        <!--默认dao层中的.xml文件不会编译到项目路径下，通过maven指定，将到层的xml文件编译到项目中，或者将.xml文件放到resource目录下，在此指定.xml文件的路径即可（resource路径下的内容默认编译到项目路径下）-->
        <property name="mapperLocations" value="classpath*:com/inspur/**/dao/*.xml"></property>

        <!-- 指定mybatis核心配置文件 -->
        <property name="configLocation" value="classpath:spring/mybatis_config.xml"/>
    </bean>

    <!-- 3、DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- basePackage:指定sql映射文件/接口所在的包（自动扫描）-->
        <property name="basePackage" value="com.inspur.ssm.dao" />
        <!-- sqlSessionFactoryBeanName：代表延迟加载-->
        <!-- 这个配置的前提条件是：映射接口类文件(.java)和映射XML文件(.xml)需要放在相同的包下（com.demo.mapper）-->
        <!-- <property name="sqlSessionFactory" ref="sqlSessionFactory"></property> -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
        <!--<property name="annotationClass" value="com.demo.common.persistence.annotation.MyBatisDao"/>-->
    </bean>

    <!-- 4、(事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <!-- dataSource:引用上面定义的数据源 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 5、使用声明式事务 -->
    <!-- transaction-manager：引用上面定义的事务管理器 -->
    <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
</beans>
